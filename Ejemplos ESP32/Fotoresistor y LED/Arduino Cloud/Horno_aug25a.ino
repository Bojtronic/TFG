#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Horno"
  https://create.arduino.cc/cloud/things/4f8ba37e-7aa3-4740-a367-8ff47fadb4e6 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float fotoresistor;
  bool lED;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

// Definición de pines
const int ledPin = 26;      // Pin para el LED
const int fotoPin = 33;     // Pin para la fotorresistencia

// Intervalo de lectura del fotoresistor (5 segundos)
const unsigned long fotoReadInterval = 5000;
unsigned long lastFotoReadTime = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Configurar pines
  pinMode(ledPin, OUTPUT);
  pinMode(fotoPin, INPUT);
  
  // Apagar LED inicialmente
  digitalWrite(ledPin, LOW);
  
  // Inicializar variables cloud
  lED = false;
  fotoresistor = 0;

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you'll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  
  // Leer valor del fotoresistor cada 5 segundos
  unsigned long currentTime = millis();
  if (currentTime - lastFotoReadTime >= fotoReadInterval) {
    lastFotoReadTime = currentTime;
    
    // Leer valor analógico (0-4095 para ESP32)
    int fotoValue = analogRead(fotoPin);
    
    // Convertir a valor porcentual o mantener como valor crudo
    // Dependiendo de cómo quieras mostrar los datos en el dashboard
    fotoresistor = fotoValue;
    
    Serial.print("Valor fotoresistencia: ");
    Serial.println(fotoValue);
  }
}

/*
  Since LED is READ_WRITE variable, onLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLEDChange() {
  // Controlar el LED basado en el valor de la variable cloud
  if (lED) {
    digitalWrite(ledPin, HIGH);
    Serial.println("LED encendido");
  } else {
    digitalWrite(ledPin, LOW);
    Serial.println("LED apagado");
  }
}
